<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arlo Murray</title>
    <link>/index.xml</link>
    <description>Recent content on Arlo Murray</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 16 Apr 2017 12:53:14 +0900</lastBuildDate>
    <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Web Scraping Go Docs for Error Messages</title>
      <link>/post/scraper/</link>
      <pubDate>Sun, 16 Apr 2017 12:53:14 +0900</pubDate>
      
      <guid>/post/scraper/</guid>
      <description>

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;

&lt;p&gt;Earlier in the year, there was quite a kerfuffle surrounding the data archived on government sites. With the new administration, scientists and concerned citizens were worried about what would happen to the information on government websites and started to salvage as much of it as they could. Events started being organized, primarily at universities, where people would volunteer to scour these sites for important data. This process is known as &lt;em&gt;web scraping&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The idea of making a web scraper has since stayed in my head. The problem was, I didn&amp;rsquo;t know what I wanted it to be able to do. There are obviously easy programs one could build, but I wanted to make one that was at least semi-cool. Yesterday, when I was thinking back on some especially tricky error messages I&amp;rsquo;ve come across, I thought of a worthy enough idea. Essentially, the web scraper would scour the Go standard library files for the error message I had encountered. Yes, Google does the same thing, but this (in my mind) is a much cooler way to go about it.&lt;/p&gt;

&lt;h2 id=&#34;what-the-web-scraper-will-do&#34;&gt;What the Web Scraper will do&lt;/h2&gt;

&lt;p&gt;The process the program will execute will be as follows:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Take in the error message as an argument&lt;/li&gt;
&lt;li&gt;Get the Go Docs homepage&lt;/li&gt;
&lt;li&gt;Scrape the documentation for source file links&lt;/li&gt;
&lt;li&gt;For each link, search the file associated with the link for the error message&lt;/li&gt;
&lt;li&gt;Return the line number of the error message&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Go documentation, as you probably know, is incredibly well organized and formatted. The standard library packages in particular are very easy to navigate and search through. Links to each of the package files can be found at &lt;a href=&#34;https://golang.org/src&#34;&gt;https://golang.org/src&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;/images/scraper1.png&#34; style=&#34;width:100%;&#34;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;All the source files of each package are also listed under &lt;a href=&#34;https://golang.org/src/&#34;&gt;https://golang.org/src/&lt;/a&gt;&lt;PACKAGENAME&gt;/.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;/images/scraper2.png&#34; style=&#34;width:100%;&#34;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The docs are also organized in a way that when a function&amp;rsquo;s link is clicked, the user will be lead to the line number the function appears in the source file. That url looks like this: &lt;a href=&#34;https://golang.org/src/fmt/print.go#L256&#34;&gt;https://golang.org/src/fmt/print.go#L256&lt;/a&gt;, where &amp;ldquo;#L&amp;rdquo; specifies the line number. However, files from non-standard library packages are not stored on golang.org. This applies to Go&amp;rsquo;s &amp;ldquo;x&amp;rdquo; packages as well. Due to this, the web scraper will only be capable of searching through standard lib files.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;/images/scraper3.png&#34; style=&#34;width:100%;&#34;&gt;&lt;/center&gt;&lt;/p&gt;

&lt;p&gt;The scraper is also going to assume that the user knows which package the error message came from. Although, it wouldn&amp;rsquo;t require much more code to implement that functionality. The package name, along with the error message, will be taken in as a command line argument.&lt;/p&gt;

&lt;h2 id=&#34;opening-the-web-page&#34;&gt;Opening the Web Page&lt;/h2&gt;

&lt;p&gt;Using the &lt;code&gt;Get&lt;/code&gt; function from the &amp;ldquo;net/http&amp;rdquo; package, we&amp;rsquo;ll make a call to golang.org/src/&lt;PACKAGE NAME&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resp, err := http.Get(&amp;quot;https://golang.org/src/&amp;quot; + os.Args[1])
if err != nil {
  log.Fatal(&amp;quot;could not get package files&amp;quot;)
}
defer resp.Body.Close()
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tokenizer&#34;&gt;Tokenizer&lt;/h2&gt;

&lt;p&gt;To do the actual scraping, we can use one of Go&amp;rsquo;s &amp;ldquo;x&amp;rdquo; packages called &lt;a href=&#34;https://godoc.org/golang.org/x/net/html&#34;&gt;net/html&lt;/a&gt;. With this package, our program will be able to parse the HTML on a certain web page and search for all of the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; HTML tags.The &lt;code&gt;NewTokenizer&lt;/code&gt; method will do the searching. It creates a &lt;em&gt;tokenizer&lt;/em&gt; for the HTML, which categorizes the HTML into token types. Tokens are HTML tags. These tokens can then in turn, have their attributes evaluated.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Types of Tokens HTML tags can be evaluated as&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const (
  // ErrorToken means that an error occurred during tokenization.
  ErrorToken TokenType = iota
  // TextToken means a text node.
  TextToken
  // A StartTagToken looks like &amp;lt;a&amp;gt;.
  StartTagToken
  // An EndTagToken looks like &amp;lt;/a&amp;gt;.
  EndTagToken
  // A SelfClosingTagToken tag looks like &amp;lt;br/&amp;gt;.
  SelfClosingTagToken
  // A CommentToken looks like &amp;lt;!--x--&amp;gt;.
  CommentToken
  // A DoctypeToken looks like &amp;lt;!DOCTYPE x&amp;gt;
  DoctypeToken
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since the program will be searching for &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags, it will technically be looking for &lt;code&gt;StartTagToken&lt;/code&gt;s.  The program could search through a web page in a for loop, however, if the page for some reason does not have a link, we would rather have the the program end instead of running infinitely. Coming across an &lt;code&gt;ErrorToken&lt;/code&gt; would be a good indication of the program hitting the end of the web page.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tizer := html.NewTokenizer(resp.Body)
var urls []string
loop:
for {
  token := tizer.Next()
  switch {
  case token == html.ErrorToken:
    break loop
  case token == html.StartTagToken:
    found := tizer.Token()
    if found.Data != &amp;quot;a&amp;quot; {
      continue
    }
    for _, a := range found.Attr {
      if a.Key == &amp;quot;href&amp;quot; {
        urls = append(urls, a.Val)
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;NewTokenizer&lt;/code&gt; takes in a &lt;code&gt;io.Reader&lt;/code&gt; as it&amp;rsquo;s parameter, so we are able to pass in the HTTP response body. &lt;code&gt;NewTokenizer&lt;/code&gt; only splits the HTMl into tokens; in order to iterate over each token, the &lt;code&gt;Next()&lt;/code&gt; method from &amp;ldquo;net/html&amp;rdquo; package is used. Each token has &lt;a href=&#34;https://godoc.org/golang.org/x/net/html#Token&#34;&gt;fields&lt;/a&gt; that can be referenced, and from the fields we can extract the link to each file in a particular package. In the program, we use a for loop to iterate over the token&amp;rsquo;s fields until we come across the &lt;code&gt;href&lt;/code&gt; field. Once we have the value of &lt;code&gt;href&lt;/code&gt;, we append it to the slice of URLs that was initialized outside of the for loop and that slice can be sent to another process which iterates over each one in an attempt to find the error message.&lt;/p&gt;

&lt;h2 id=&#34;finding-the-error-message&#34;&gt;Finding the Error Message&lt;/h2&gt;

&lt;p&gt;To read the contents of each file, the body should be scanned line by line. We can do that by using the scanner from package &amp;ldquo;bufio&amp;rdquo;. While scanning the body, we can call the &lt;code&gt;Contains()&lt;/code&gt; method from package &amp;ldquo;strings&amp;rdquo; to search for the error message. If the program comes across it, the line will be tokenized. This time, we are searching for the line number to return to the user. If you look at the file&amp;rsquo;s HTML, you will see that each line number is placed in a set of &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags and is also set as the &lt;code&gt;id&lt;/code&gt; attribute. Once we have that, the program can open a browser window to the URL specified with the line number.&lt;/p&gt;

&lt;p&gt;Note: Having the scanner finish scanning the whole body, instead of stopping when it comes across the first instance of an error message is pretty helpful if whatever the user is searching for shows up more than once in the file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for _ ,url := range urls {
  resp, err := http.Get(&amp;quot;https://golang.org/src/&amp;quot; + os.Args[1] + &amp;quot;/&amp;quot; + url)
  if err != nil {
    fmt.Println(&amp;quot;could not get package file&amp;quot;)
  }
  defer resp.Body.Close()

  scanner := bufio.NewScanner(resp.Body)
  for scanner.Scan() {
    line := scanner.Text()
    if strings.Contains(line, os.Args[2]) {
      tizer := html.NewTokenizer(strings.NewReader(line))
      token := tizer.Next()

      switch {
      case token == html.ErrorToken:
        break
      case token == html.StartTagToken:
        found := tizer.Token()
        if found.Data != &amp;quot;span&amp;quot; {
          continue
        }

        for _, a := range found.Attr {
          if a.Key == &amp;quot;id&amp;quot; {
            cmd := exec.Command(&amp;quot;open&amp;quot;, (resp.Request.URL).String() + &amp;quot;#&amp;quot; + a.Val)
            cmd.Run()
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;separating-the-program-into-functions&#34;&gt;Separating the Program Into Functions&lt;/h2&gt;

&lt;p&gt;Aside from &lt;code&gt;func main&lt;/code&gt;, the program could be split into two other functions. One function could handle scraping the &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; tags from the package&amp;rsquo;s source page, while the other could handle searching for the error messages from the file itself.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
  &amp;quot;golang.org/x/net/html&amp;quot;
  &amp;quot;net/http&amp;quot;
  &amp;quot;os&amp;quot;
  &amp;quot;log&amp;quot;
  &amp;quot;os/exec&amp;quot;
  &amp;quot;bufio&amp;quot;
  &amp;quot;strings&amp;quot;
)

func main() {
    urls := crawl()
    crawlEach(urls)
}
func crawl() []string {
  resp, err := http.Get(&amp;quot;https://golang.org/src/&amp;quot; + os.Args[1])
  if err != nil {
    log.Fatal(&amp;quot;could not get package files&amp;quot;)
  }

  defer resp.Body.Close()
  tizer := html.NewTokenizer(resp.Body)
  var urls []string
  loop:
  for {
    token := tizer.Next()
    switch {
    case token == html.ErrorToken:
      break loop
    case token == html.StartTagToken:
      found := tizer.Token()
      if found.Data != &amp;quot;a&amp;quot; {
        continue
      }
      for _, a := range found.Attr {
        if a.Key == &amp;quot;href&amp;quot; {
          urls = append(urls, a.Val)
        }
      }
    }
  }
}
func crawlEach(urls []string) {
  for _ ,url := range urls {
    resp, err := http.Get(&amp;quot;https://golang.org/src/&amp;quot; + os.Args[1] + &amp;quot;/&amp;quot; + url)
    if err != nil {
      log.Fatal(&amp;quot;could not get package file&amp;quot;)
    }
    defer resp.Body.Close()

    scanner := bufio.NewScanner(resp.Body)
    for scanner.Scan() {
      line := scanner.Text()
      if strings.Contains(line, os.Args[2]) {
        tizer := html.NewTokenizer(strings.NewReader(line))
        token := tizer.Next()

        switch {
        case token == html.ErrorToken:
          break
        case token == html.StartTagToken:
          found := tizer.Token()
          if found.Data != &amp;quot;span&amp;quot; {
            continue
          }

          for _, a := range found.Attr {
            if a.Key == &amp;quot;id&amp;quot; {
              cmd := exec.Command(&amp;quot;open&amp;quot;, (resp.Request.URL).String() + &amp;quot;#&amp;quot; + a.Val)
              cmd.Run()
            }
          }
        }
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are quite a few bugs with this code, on top of being unorganized. For instance, if a user were to search for &amp;ldquo;if&amp;rdquo; in the source files, the program would pick up possibly hundreds of results, and if it were to try and open a new browser window for every instance, the result would be total mayhem. Overall though, it&amp;rsquo;s a pretty cool way to search for error messages. Let me know what you think in the comments, or shoot me an &lt;a href=&#34;mailto:arloemurray@gmail.com?Subject=Web%20scraper&#34;&gt;email&lt;/a&gt;. The code can also be viewed on my &lt;a href=&#34;https://github.com/arlomurray/godoc-scraper&#34;&gt;Github&lt;/a&gt; profile.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting up a blog with Github Pages and Hugo</title>
      <link>/post/setting-blog/</link>
      <pubDate>Wed, 12 Apr 2017 12:53:14 +0900</pubDate>
      
      <guid>/post/setting-blog/</guid>
      <description>

&lt;p&gt;As the topic is still fresh on my mind from creating this blog, I thought I would write a quick post on how others can create their own.&lt;/p&gt;

&lt;h2 id=&#34;what-is-hugo-and-github-pages&#34;&gt;What is Hugo and Github Pages&lt;/h2&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;/images/hugo.png&#34; style=&#34;width:60%;&#34;&gt;&lt;/center&gt;
Hugo is a static website generator, which makes it ideal for creating things like blogs, personal websites, or any other site that does not require dynamic content. It is very simple to install and configure on any operating system, be hosted anywhere, is incredibly fast, &lt;em&gt;and&lt;/em&gt; it is written in the Go programming language. Being quite a avid fan/user of Go, I was naturally drawn to the platform. It also seemed easier to use than Wordpress, which I&amp;rsquo;ve had my fair share of bouts with in the past. On top of all that, Hugo is a free platform.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;&lt;img src=&#34;/images/github.png&#34; style=&#34;width:100%;&#34;&gt;&lt;/center&gt;
However, since Hugo only generates static pages, the site needs to be hosted by another service. (Hugo actually can serve websites, but it does not seem to be a popular option.) In my case, this is where Github Pages comes into play. Anyone that has used Github or follows blogs of programmers have probably heard of Github Pages. Hosting a site on GP is also free, plus the site can have a custom domain and be secured with HTTPS. Full Disclosure: I&amp;rsquo;ve heard mixed reviews about Github Pages, but decided to give it a shot.&lt;/p&gt;

&lt;p&gt;Being familiar with git and a text editor, I thought this would be a breeze. Luckily, it was!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;I&amp;rsquo;m going to assume that anyone following this already has git configured on their computer.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&#34;installing-hugo&#34;&gt;Installing Hugo&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;For Windows Users:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a new folder in your C drive and name it &lt;code&gt;C:\Hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;In the Hugo folder, create two subfolders named &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;Sites&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Download the Windows Hugo package from &lt;a href=&#34;https://github.com/spf13/hugo/releases&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;After downloading, extract the files into the newly created &lt;code&gt;bin&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;Rename the executable &lt;code&gt;hugo.exe&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Using the command line, &lt;code&gt;cd&lt;/code&gt; into &lt;code&gt;C:\Hugo\bin&lt;/code&gt; and set the path by entering &lt;code&gt;set PATH=%PATH%;C:\Hugo\bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Restart the terminal for the changes to take place&lt;/li&gt;
&lt;li&gt;Check to see it was successful by entering the command &lt;code&gt;hugo help&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;For Mac Users:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;The easiest way to install Hugo on a Mac, is by utilizing Homebrew. Please install it before hand.&lt;/em&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Run the command &lt;code&gt;brew update&lt;/code&gt; in the terminal (if you had already had Homebrew installed on your machine)&lt;/li&gt;
&lt;li&gt;Run the command &lt;code&gt;brew install hugo&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Verify that Hugo was installed successfully by running &lt;code&gt;hugo help&lt;/code&gt; (you may need to restart the terminal first)&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;creating-a-new-site&#34;&gt;Creating a New Site&lt;/h2&gt;

&lt;p&gt;Setting up a new site with Hugo is pretty straightforward. If you are using Windows, navigate to the subfolder &lt;code&gt;Sites&lt;/code&gt; in &lt;code&gt;C:\Hugo&lt;/code&gt; using the command line. If you are using MacOS, pick a convenient place and &lt;code&gt;cd&lt;/code&gt; into it. I chose to have my site live in my &lt;code&gt;src&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;Enter the command &lt;code&gt;hugo new site blog&lt;/code&gt;. Substitute &lt;code&gt;blog&lt;/code&gt; with whatever you want to name your site. This should create a scaffold in whatever directory you ran the previous command in.&lt;/p&gt;

&lt;p&gt;Next, you can install a theme of your choice. For this example, I will use the &lt;a href=&#34;http://themes.gohugo.io/hugo-theme-cactus-plus/&#34;&gt;theme&lt;/a&gt; that I&amp;rsquo;m currently using on this site. To install a theme, &lt;code&gt;cd&lt;/code&gt; into the &lt;code&gt;themes&lt;/code&gt; folder inside of your site. Run the command &lt;code&gt;git clone https://github.com/nodejh/hugo-theme-cactus-plus.git&lt;/code&gt;, substituting the link for the Git repository to the theme you have chosen. Take a look at the &lt;code&gt;config.toml&lt;/code&gt; file in the theme&amp;rsquo;s repository for all the specifications you can modify. For example, in &lt;code&gt;hugo-theme-cactus-plus&lt;/code&gt; I can specify my social media handlers, the title of the site, bio, etc. Whether you specify those or not is totally up to you. However, you do need to specify the &lt;code&gt;baseurl&lt;/code&gt;, &lt;code&gt;themesDir&lt;/code&gt;, and &lt;code&gt;theme&lt;/code&gt;. For &lt;code&gt;baseurl&lt;/code&gt;, I put &lt;code&gt;/&lt;/code&gt; as the theme did not render properly if I put the url to my site. For &lt;code&gt;themesDir&lt;/code&gt;, I put &lt;code&gt;themes/&lt;/code&gt;, and for &lt;code&gt;theme&lt;/code&gt; I put the name of the theme as it is in the &lt;code&gt;themes&lt;/code&gt; folder. In my case, that was &lt;code&gt;hugo-theme-cactus-plus&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If all went well, you should be able to enter the command &lt;code&gt;hugo server -w&lt;/code&gt; and go to &lt;code&gt;localhost:1313&lt;/code&gt; to see your new site. It may take a minute for everything to render properly.&lt;/p&gt;

&lt;h2 id=&#34;setting-up-new-repositories&#34;&gt;Setting Up New Repositories&lt;/h2&gt;

&lt;p&gt;To host our new site using Github Pages, we actually have to create two repositories on our Github profile. One will host all of the Hugo content while the other will host the site and be placed inside the other repository.&lt;/p&gt;

&lt;p&gt;Create the first repository and name it &lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt; and check the &amp;ldquo;Initialize this repository with a README&amp;rdquo; box. Then create the second repository and name it anything you like (preferably it will be what you named your site folder). &lt;code&gt;cd&lt;/code&gt; into your project folder and enter these commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git init

$ git remote add origin git@github.com:&amp;lt;USERNAME&amp;gt;/blog.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We should now be able to serve our site locally. Enter &lt;code&gt;hugo server -t hugo-theme-cactus-plus&lt;/code&gt; in the terminal, substituting the theme with the one you chose for your site. You should see your site if you go to &lt;code&gt;localhost:1313&lt;/code&gt;. Stop the server. Remove the public folder that was generated with &lt;code&gt;rm -rf public&lt;/code&gt;. Then enter this command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git submodule add -b master git@github.com:&amp;lt;USERNAME&amp;gt;/&amp;lt;USERNAME&amp;gt;.github.io.git public
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This command should have added the static site into the &lt;code&gt;public&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;Before deploying the site, add all the files from the main &lt;code&gt;blog&lt;/code&gt; repository and push it up to Github.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ git add .

$ git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally, to deploy the site first set the theme, add all the files from the &lt;code&gt;public&lt;/code&gt; folder, make a commit, and push up to the &lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt; repository.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ hugo -t hugo-theme-cactus-plus
$ cd public
$ git add .
$ git commit -m &amp;quot;deploy site&amp;quot;
$ git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There may be a delay, but after a few moments you should be able to see your new site at &lt;code&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/code&gt;!&lt;/p&gt;

&lt;h2 id=&#34;automate-deployment&#34;&gt;Automate Deployment&lt;/h2&gt;

&lt;p&gt;Optionally, you could create a shell script to deploy the site for you instead of having to do the last part every time you change the site.
To do so, create a new file called &lt;code&gt;deploy.sh&lt;/code&gt; and add the following to it (this is straight from the Hugo tutorial):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash

echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;

# Build the project.
hugo # if using a theme, replace by `hugo -t &amp;lt;yourtheme&amp;gt;`

# Go To Public folder
cd public
# Add changes to git.
git add -A

# Commit changes.
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;

# Push source and build repos.
git push origin master

# Come Back
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make the following script an executable by entering &lt;code&gt;chmod +x deploy.sh&lt;/code&gt;. Now to deploy your site, all you would need to do is enter &lt;code&gt;./deploy.sh&lt;/code&gt; in the terminal. Note: This script only adds changes from the &lt;code&gt;public&lt;/code&gt; folder, so if had modified something in the &lt;code&gt;blog&lt;/code&gt; folder you would manually need to push that up to Github.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>